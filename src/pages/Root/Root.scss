@use "../../scss/abstracts" as *;

.header {
  z-index: 10;
  @include max-width-content(17rem);
  @include padding-inline;
  @include border(0.0625rem, rgba($clr-white, 0.15), $where: bottom);

  @include mq($until: $bp-tablet) {
    position: sticky;
    top: 0;
    background-color: $clr-main-900;
  }
}

.nav {
  z-index: 5;
  position: relative;
  padding-block: 1rem;

  @include mq($bp-tablet) {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 2.44rem;
  }

  @include mq($bp-desktop) {
    flex-direction: row;
    justify-content: space-between;
  }

  &__list {
    display: flex;
    list-style-type: none;

    @include mq($until: $bp-tablet) {
      position: absolute;
      inset: 4.5rem 0 0 0;
      overflow-x: hidden;
      flex-direction: column;
      min-height: 100vh;
      min-height: 100dvh;
      background: $clr-main-900;
      opacity: 0;
      width: 0;
      margin-left: auto;
      transition: opacity 0.6s ease-out 0.3s, width 0.6s ease-in;

      input:checked ~ & {
        width: 100%;
        opacity: 1;
        transition: opacity 0.6s ease-out 0.1s, width 0.9s ease-out;
      }
    }

    @include mq($bp-tablet) {
      gap: 2rem;
    }
  }

  &__item {
    transition: background-color 200ms ease-in;

    @include mq($until: $bp-tablet) {
      display: grid;
      grid-template-rows: 0fr;

      &:not(:first-child) {
        @include border(0.0625rem, rgba($clr-white, 0.15), $where: top);
      }

      ///// > symbol in hamburger list /////
      @include pseudo(after, $inset: 0 0 0 auto) {
        margin-block: auto;
        height: 0.5rem;
        aspect-ratio: 1 / 1;
        @include border(0.0625rem, rgba($clr-white, 0.3));
        border-left-color: transparent;
        border-bottom-color: transparent;
        transform: translateX(-0.2rem) rotate(45deg);
        pointer-events: none;
      }

      ///// colored circle in hamburger list /////
      @each $planet in map-keys($planet-colors) {
        $color: map-get($planet-colors, $planet);
        $index: index(map-keys($planet-colors), $planet);

        &:nth-of-type(#{$index}) {
          @include pseudo(before, $parent: true, $inset: 0 auto 0 0) {
            margin-block: auto;
            height: 1.25rem;
            aspect-ratio: 1 / 1;
            background-color: $color;
            border-radius: 50%;
            opacity: 0;
            transition: opacity 0.3s ease-out;
            pointer-events: none;

            input:checked ~ ul & {
              opacity: 1;
              transition: opacity 0.3s ease-in 0.65s;
            }
          }
        }
      }
    }
  }

  &__link {
    @include mq($until: $bp-tablet) {
      padding: 1.25rem 2.8rem;
      opacity: 0;
      transition: opacity 0.3s ease-out;

      input:checked ~ .nav__list & {
        opacity: 1;
        transition: opacity 0.3s ease-in 0.65s;
      }
    }
  }
}

.hamburger {
  // NOMNOM üçî

  &__input {
    appearance: none;
    position: absolute;
    left: -20rem;
  }

  &__label {
    position: absolute;
    inset: 1.5rem 0 auto auto;
    padding: 0.3rem;
    cursor: pointer;

    input:focus-visible + & {
      outline: 0.2rem solid white;
    }
  }

  &__line {
    $height: 0.1875rem;
    $offset: 0.195em;
    opacity: 0.4;
    display: block;
    width: 1.5rem;
    height: $height;
    background-color: $clr-white;
    transition: opacity 300ms ease-in;

    input:checked + label & {
      opacity: 1;
    }

    &:nth-child(1) {
      transform: translateY(calc($height * -1.2));
      animation: 1.3s forwards;

      @include animation {
        0% {
          transform: translateY($offset) rotate(-45deg) scale(1);
        }
        50% {
          transform: translateY($offset) rotate(-45deg) scale(0, 1);
        }
        55% {
          transform: translateY($height) scale(0, 1);
        }
        75% {
          transform: translateY($height) scale(1);
        }
        100% {
          transform: translateY(calc($height * -1.2));
        }
      }

      input:checked ~ label & {
        animation: 1.3s forwards;

        @include animation {
          0% {
            transform: translateY(calc($height * -1.2));
          }
          25% {
            transform: translateY($height);
          }
          45% {
            transform: translateY($height) scale(0, 1);
          }
          50% {
            transform: translateY($offset) rotate(-45deg) scale(0, 1);
          }
          100% {
            transform: translateY($offset) rotate(-45deg) scale(1);
          }
        }
      }
    }

    &:nth-child(2) {
      opacity: 0.4;
      transition: opacity 200ms ease-in 0.9s;

      input:checked ~ label & {
        opacity: 0;
        transition-delay: 200ms;
      }
    }

    &:nth-child(3) {
      transform: translateY(calc($height * 1.2));
      animation: 1.3s forwards;

      @include animation {
        0% {
          transform: translateY(-$offset) rotate(45deg) scale(1);
        }
        50% {
          transform: translateY(-$offset) rotate(45deg) scale(0, 1);
        }
        55% {
          transform: translateY(-$height) scale(0, 1);
        }
        75% {
          transform: translateY(-$height) scale(1);
        }
        100% {
          transform: translateY(calc($height * 1.2));
        }
      }

      input:checked ~ label & {
        animation: 1.3s forwards;

        @include animation {
          0% {
            transform: translateY(calc($height * 1.2));
          }
          25% {
            transform: translateY(-$height);
          }
          45% {
            transform: translateY(-$height) scale(0, 1);
          }
          50% {
            transform: translateY(-$offset) rotate(45deg) scale(0, 1);
          }
          100% {
            transform: translateY(-$offset) rotate(45deg) scale(1);
          }
        }
      }
    }
  }

  &__label,
  &__input {
    @include mq($bp-tablet) {
      display: none;
    }
  }
}
